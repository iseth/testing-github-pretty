const originalAddEventListener = EventTarget.prototype.addEventListener;
export function addEventListenerWithAbortSignal(type, callback, options) {
    if (typeof options === 'object' && 'signal' in options && options.signal instanceof AbortSignal) {
        if (options.signal.aborted)
            return;
        originalAddEventListener.call(options.signal, 'abort', () => {
            this.removeEventListener(type, callback, options);
        });
    }
    return originalAddEventListener.call(this, type, callback, options);
}
export function isSupported() {
    let signalSupported = false;
    const setSignalSupported = () => (signalSupported = true);
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    function noop() {}
    const options = Object.create({}, {
        signal: {
            get: setSignalSupported
        }
    });
    try {
        const target = new EventTarget();
        target.addEventListener('test', noop, options);
        target.removeEventListener('test', noop, options);
        return signalSupported;
    } catch {
        return signalSupported;
    }
}
/*#__PURE__*/
export function isPolyfilled() {
    return EventTarget.prototype.addEventListener === addEventListenerWithAbortSignal;
}
export function apply() {
    if (typeof AbortSignal === 'function' && !isSupported()) {
        EventTarget.prototype.addEventListener = addEventListenerWithAbortSignal;
    }
}
//# sourceMappingURL=event-abortsignal.js.map