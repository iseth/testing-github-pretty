export function promiseAny(ps) {
    return new Promise((resolve, reject) => {
        let resolved = false;
        const promises = Array.from(ps);
        const rejections = [];

        function resolveOne(value) {
            if (!resolved) {
                resolved = true;
                resolve(value);
            }
        }

        function rejectIfDone(e) {
            rejections.push(e);
            if (rejections.length === promises.length) {
                reject(new globalThis.AggregateError(rejections, 'All Promises rejected'));
            }
        }
        for (const p of promises) {
            // eslint-disable-next-line github/no-then
            Promise.resolve(p).then(resolveOne, rejectIfDone);
        }
    });
}
/*#__PURE__*/
export function isSupported() {
    return 'any' in Promise && typeof Promise.any === 'function';
}
/*#__PURE__*/
export function isPolyfilled() {
    return Promise.all === promiseAny;
}
export function apply() {
    if (!isSupported()) {
        Promise.any = promiseAny;
    }
}
//# sourceMappingURL=promise-any.js.map